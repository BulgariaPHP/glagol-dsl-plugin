/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.glagol;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.glagol.psi.GlagolTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_GlagolLexer.flex</tt>
 */
public class _GlagolLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\4\1\22\0\1\2\1\52\1\27\2\0\1\47\1\53\1\25\1\42\1\43\1\31\1\46\1"+
    "\35\1\45\1\12\1\30\12\11\1\34\1\33\1\50\1\32\1\51\1\55\1\44\32\13\1\40\1\26"+
    "\1\41\1\0\1\14\1\0\1\7\1\3\1\57\1\67\1\6\1\20\1\62\1\64\1\60\1\66\1\65\1\5"+
    "\1\22\1\10\1\4\1\56\1\24\1\16\1\21\1\15\1\17\1\61\1\63\1\24\1\23\1\24\1\36"+
    "\1\54\1\37\7\0\1\1\32\0\1\2\337\0\1\2\177\0\13\2\35\0\2\1\5\0\1\2\57\0\1\2"+
    "\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\6\3\1\4\1\5\1\6\6\3"+
    "\2\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\3\1\1\31\14\3\1\32\2\3"+
    "\1\0\12\3\1\0\1\33\3\0\1\34\1\0\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\5\3\1\44"+
    "\10\3\1\45\2\3\1\46\1\3\1\47\10\3\1\50"+
    "\7\3\1\33\1\0\4\3\1\51\3\3\1\52\2\3"+
    "\1\53\1\3\1\54\2\3\1\55\1\56\2\3\1\57"+
    "\2\3\1\60\5\3\1\61\6\3\1\62\1\3\1\63"+
    "\2\3\1\64\6\3\1\65\1\66\12\3\1\67\1\0"+
    "\1\3\1\70\2\3\1\71\1\72\1\3\1\73\1\3"+
    "\1\74\3\3\1\75\2\3\1\76\1\0\1\53\3\3"+
    "\1\77\1\100\1\101\1\102\2\3\1\0\1\3\1\103"+
    "\2\3\1\104\1\105\1\106\2\3\1\107\1\110";

  private static int [] zzUnpackAction() {
    int [] result = new int[222];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\70\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310"+
    "\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\70\0\u0460\0\70"+
    "\0\u0498\0\70\0\70\0\70\0\70\0\70\0\70\0\70"+
    "\0\70\0\70\0\70\0\70\0\u04d0\0\u0508\0\u0540\0\u0578"+
    "\0\u05b0\0\70\0\u05e8\0\u0620\0\u0658\0\u0690\0\u06c8\0\u0700"+
    "\0\u0738\0\u0770\0\u07a8\0\u07e0\0\u0818\0\u0850\0\u0118\0\u0888"+
    "\0\u08c0\0\u08f8\0\u0930\0\u0968\0\u09a0\0\u09d8\0\u0a10\0\u0a48"+
    "\0\u0a80\0\u0ab8\0\u0af0\0\u0b28\0\u03b8\0\70\0\u0b60\0\u03f0"+
    "\0\u0b98\0\u0bd0\0\u0c08\0\70\0\70\0\70\0\70\0\70"+
    "\0\70\0\70\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20\0\u0118"+
    "\0\u0d58\0\u0d90\0\u0dc8\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0"+
    "\0\u0118\0\u0f18\0\u0f50\0\u0118\0\u0f88\0\u08f8\0\u0fc0\0\u0ff8"+
    "\0\u1030\0\u1068\0\u10a0\0\u10d8\0\u1110\0\u1148\0\u0118\0\u1180"+
    "\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u1298\0\u12d0\0\u03f0\0\u1308"+
    "\0\u1340\0\u1378\0\u13b0\0\u13e8\0\u0118\0\u1420\0\u1458\0\u1490"+
    "\0\u0118\0\u14c8\0\u1500\0\u1538\0\u1570\0\u0118\0\u15a8\0\u15e0"+
    "\0\u0118\0\u0118\0\u1618\0\u1650\0\u0118\0\u1688\0\u16c0\0\u0118"+
    "\0\u16f8\0\u1730\0\u1768\0\u17a0\0\u17d8\0\u0c08\0\u1810\0\u1848"+
    "\0\u1880\0\u18b8\0\u18f0\0\u1928\0\u0118\0\u1960\0\u0118\0\u1998"+
    "\0\u19d0\0\u0118\0\u1a08\0\u1a40\0\u1a78\0\u1ab0\0\u1ae8\0\u1b20"+
    "\0\u0118\0\u0118\0\u1b58\0\u1b90\0\u1bc8\0\u1c00\0\u1c38\0\u1c70"+
    "\0\u1ca8\0\u1ce0\0\u1d18\0\u1d50\0\u0118\0\u1d88\0\u1dc0\0\u0118"+
    "\0\u1df8\0\u1e30\0\u0118\0\u0118\0\u1e68\0\u0118\0\u1ea0\0\u0118"+
    "\0\u1ed8\0\u1f10\0\u1f48\0\u0118\0\u1f80\0\u1fb8\0\u0118\0\u1ff0"+
    "\0\u0118\0\u2028\0\u2060\0\u2098\0\u0118\0\u0118\0\u0118\0\u0118"+
    "\0\u20d0\0\u2108\0\u2140\0\u2178\0\u0118\0\u21b0\0\u21e8\0\u0118"+
    "\0\70\0\u0118\0\u2220\0\u2258\0\u0118\0\u0118";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[222];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\2\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\2\6\1\23\1\2\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\2\6\1\61\1\6\71\0\2\3\70\0"+
    "\1\6\1\62\4\6\2\0\1\6\1\0\1\6\1\63"+
    "\6\6\31\0\12\6\3\0\5\6\1\64\2\0\1\6"+
    "\1\0\10\6\31\0\12\6\3\0\6\6\2\0\1\6"+
    "\1\0\10\6\31\0\12\6\3\0\2\6\1\65\2\6"+
    "\1\66\2\0\1\6\1\0\10\6\31\0\12\6\3\0"+
    "\6\6\2\0\1\6\1\0\4\6\1\67\3\6\31\0"+
    "\12\6\3\0\3\6\1\70\1\71\1\6\2\0\1\6"+
    "\1\0\10\6\31\0\12\6\11\0\1\12\1\72\60\0"+
    "\7\14\1\0\12\14\31\0\12\14\3\0\6\6\2\0"+
    "\1\6\1\0\1\6\1\73\6\6\31\0\6\6\1\74"+
    "\3\6\3\0\3\6\1\75\2\6\2\0\1\6\1\0"+
    "\10\6\31\0\12\6\3\0\6\6\2\0\1\6\1\0"+
    "\1\76\7\6\31\0\12\6\3\0\1\6\1\77\1\100"+
    "\1\6\1\101\1\6\2\0\1\6\1\0\10\6\31\0"+
    "\12\6\3\0\3\6\1\102\2\6\2\0\1\6\1\0"+
    "\1\103\7\6\31\0\12\6\3\0\4\6\1\104\1\6"+
    "\2\0\1\6\1\0\10\6\31\0\12\6\25\105\1\106"+
    "\1\107\41\105\26\110\1\111\1\106\40\110\30\0\1\112"+
    "\1\113\70\0\1\114\71\0\1\115\65\0\1\116\67\0"+
    "\1\117\67\0\1\120\110\0\1\121\70\0\1\122\16\0"+
    "\3\6\1\123\2\6\2\0\1\6\1\0\1\6\1\124"+
    "\1\125\5\6\31\0\12\6\3\0\1\6\1\126\4\6"+
    "\2\0\1\6\1\0\10\6\31\0\12\6\3\0\5\6"+
    "\1\127\2\0\1\6\1\0\3\6\1\130\1\6\1\131"+
    "\2\6\31\0\12\6\3\0\1\6\1\132\2\6\1\133"+
    "\1\6\2\0\1\6\1\0\10\6\31\0\12\6\3\0"+
    "\3\6\1\134\2\6\2\0\1\6\1\0\10\6\31\0"+
    "\12\6\3\0\6\6\2\0\1\6\1\0\10\6\31\0"+
    "\6\6\1\135\3\6\3\0\6\6\2\0\1\6\1\0"+
    "\4\6\1\136\3\6\31\0\12\6\3\0\1\6\1\137"+
    "\4\6\2\0\1\6\1\0\10\6\31\0\12\6\3\0"+
    "\3\6\1\140\2\6\2\0\1\6\1\0\10\6\31\0"+
    "\12\6\3\0\3\6\1\141\2\6\2\0\1\6\1\0"+
    "\10\6\31\0\12\6\3\0\6\6\2\0\1\6\1\0"+
    "\4\6\1\142\3\6\31\0\12\6\3\0\6\6\2\0"+
    "\1\6\1\0\1\143\7\6\31\0\12\6\3\0\6\6"+
    "\2\0\1\6\1\0\10\6\31\0\5\6\1\144\4\6"+
    "\3\0\6\6\2\0\1\6\1\0\5\6\1\145\2\6"+
    "\31\0\12\6\11\0\1\146\61\0\6\6\2\0\1\6"+
    "\1\0\2\6\1\147\5\6\31\0\12\6\3\0\6\6"+
    "\2\0\1\6\1\0\10\6\31\0\2\6\1\150\7\6"+
    "\3\0\2\6\1\151\3\6\2\0\1\6\1\0\1\152"+
    "\3\6\1\153\1\154\2\6\31\0\1\155\11\6\3\0"+
    "\6\6\2\0\1\6\1\0\10\6\31\0\2\6\1\156"+
    "\7\6\3\0\6\6\2\0\1\6\1\0\1\6\1\157"+
    "\6\6\31\0\12\6\3\0\1\6\1\160\4\6\2\0"+
    "\1\6\1\0\2\6\1\161\5\6\31\0\12\6\3\0"+
    "\2\6\1\162\3\6\2\0\1\6\1\0\10\6\31\0"+
    "\12\6\3\0\2\6\1\163\3\6\2\0\1\6\1\0"+
    "\1\6\1\164\6\6\31\0\12\6\3\0\6\6\2\0"+
    "\1\6\1\0\1\6\1\165\6\6\31\0\12\6\3\0"+
    "\5\6\1\166\2\0\1\6\1\0\10\6\31\0\12\6"+
    "\1\105\1\0\66\105\26\110\1\111\1\167\40\110\1\112"+
    "\1\0\66\112\31\113\1\170\36\113\3\0\6\6\2\0"+
    "\1\6\1\0\1\6\1\171\6\6\31\0\12\6\3\0"+
    "\6\6\2\0\1\6\1\0\10\6\31\0\2\6\1\172"+
    "\7\6\3\0\1\173\5\6\2\0\1\6\1\0\10\6"+
    "\31\0\12\6\3\0\5\6\1\174\2\0\1\6\1\0"+
    "\10\6\31\0\12\6\3\0\6\6\2\0\1\6\1\0"+
    "\1\175\7\6\31\0\12\6\3\0\6\6\2\0\1\6"+
    "\1\0\10\6\31\0\1\176\11\6\3\0\6\6\2\0"+
    "\1\6\1\0\10\6\31\0\2\6\1\177\7\6\3\0"+
    "\2\6\1\200\3\6\2\0\1\6\1\0\10\6\31\0"+
    "\12\6\3\0\6\6\2\0\1\6\1\0\1\201\7\6"+
    "\31\0\12\6\3\0\3\6\1\202\2\6\2\0\1\6"+
    "\1\0\10\6\31\0\12\6\3\0\1\6\1\203\4\6"+
    "\2\0\1\6\1\0\10\6\31\0\12\6\3\0\2\6"+
    "\1\204\3\6\2\0\1\6\1\0\10\6\31\0\12\6"+
    "\3\0\4\6\1\205\1\6\2\0\1\6\1\0\10\6"+
    "\31\0\12\6\3\0\3\6\1\206\2\6\2\0\1\6"+
    "\1\0\10\6\31\0\12\6\3\0\6\6\2\0\1\6"+
    "\1\0\10\6\31\0\2\6\1\207\7\6\3\0\3\6"+
    "\1\210\2\6\2\0\1\6\1\0\10\6\31\0\12\6"+
    "\3\0\3\6\1\211\2\6\2\0\1\6\1\0\10\6"+
    "\31\0\12\6\3\0\6\6\2\0\1\6\1\0\4\6"+
    "\1\212\3\6\31\0\12\6\3\0\4\6\1\213\1\6"+
    "\2\0\1\6\1\0\10\6\31\0\12\6\3\0\6\6"+
    "\2\0\1\6\1\0\2\6\1\214\5\6\31\0\12\6"+
    "\3\0\6\6\2\0\1\6\1\0\1\215\7\6\31\0"+
    "\12\6\3\0\1\6\1\216\4\6\2\0\1\6\1\0"+
    "\10\6\31\0\12\6\3\0\1\6\1\217\4\6\2\0"+
    "\1\6\1\0\10\6\31\0\12\6\3\0\2\6\1\220"+
    "\3\6\2\0\1\6\1\0\10\6\31\0\12\6\3\0"+
    "\4\6\1\221\1\6\2\0\1\6\1\0\10\6\31\0"+
    "\12\6\3\0\6\6\2\0\1\6\1\0\4\6\1\222"+
    "\3\6\31\0\12\6\3\0\6\6\2\0\1\6\1\0"+
    "\4\6\1\147\3\6\31\0\12\6\3\0\6\6\2\0"+
    "\1\6\1\0\3\6\1\223\4\6\31\0\12\6\3\0"+
    "\6\6\2\0\1\6\1\0\10\6\31\0\3\6\1\224"+
    "\6\6\3\0\6\6\2\0\1\6\1\0\10\6\31\0"+
    "\2\6\1\225\7\6\3\0\6\6\2\0\1\6\1\0"+
    "\6\6\1\141\1\6\31\0\12\6\30\113\1\226\1\170"+
    "\36\113\3\0\6\6\2\0\1\6\1\0\4\6\1\227"+
    "\3\6\31\0\12\6\3\0\6\6\2\0\1\6\1\0"+
    "\5\6\1\230\2\6\31\0\3\6\1\231\6\6\3\0"+
    "\2\6\1\232\3\6\2\0\1\6\1\0\10\6\31\0"+
    "\12\6\3\0\6\6\2\0\1\6\1\0\1\233\7\6"+
    "\31\0\12\6\3\0\1\6\1\234\4\6\2\0\1\6"+
    "\1\0\10\6\31\0\12\6\3\0\6\6\2\0\1\6"+
    "\1\0\10\6\31\0\11\6\1\235\3\0\6\6\2\0"+
    "\1\6\1\0\2\6\1\236\5\6\31\0\12\6\3\0"+
    "\5\6\1\237\2\0\1\6\1\0\10\6\31\0\12\6"+
    "\3\0\5\6\1\240\2\0\1\6\1\0\10\6\31\0"+
    "\12\6\3\0\3\6\1\241\2\6\2\0\1\6\1\0"+
    "\10\6\31\0\12\6\3\0\6\6\2\0\1\6\1\0"+
    "\10\6\31\0\7\6\1\242\2\6\3\0\6\6\2\0"+
    "\1\6\1\0\1\243\7\6\31\0\12\6\3\0\6\6"+
    "\2\0\1\6\1\0\4\6\1\244\3\6\31\0\12\6"+
    "\3\0\6\6\2\0\1\6\1\0\1\245\7\6\31\0"+
    "\12\6\3\0\6\6\2\0\1\6\1\0\1\6\1\246"+
    "\6\6\31\0\12\6\3\0\6\6\2\0\1\6\1\0"+
    "\10\6\31\0\3\6\1\247\6\6\3\0\6\6\2\0"+
    "\1\6\1\0\4\6\1\250\3\6\31\0\12\6\3\0"+
    "\6\6\2\0\1\6\1\0\1\251\7\6\31\0\12\6"+
    "\3\0\6\6\2\0\1\6\1\0\10\6\31\0\6\6"+
    "\1\252\3\6\3\0\6\6\2\0\1\6\1\0\10\6"+
    "\31\0\2\6\1\253\7\6\3\0\6\6\2\0\1\6"+
    "\1\0\10\6\31\0\2\6\1\254\7\6\3\0\5\6"+
    "\1\255\2\0\1\6\1\0\10\6\31\0\12\6\3\0"+
    "\6\6\2\0\1\6\1\0\10\6\31\0\2\6\1\256"+
    "\7\6\3\0\4\6\1\257\1\6\2\0\1\6\1\0"+
    "\10\6\31\0\12\6\3\0\4\6\1\260\1\6\2\0"+
    "\1\6\1\0\10\6\31\0\12\6\3\0\6\6\2\0"+
    "\1\6\1\0\10\6\31\0\2\6\1\261\7\6\3\0"+
    "\6\6\2\0\1\6\1\0\1\6\1\262\6\6\31\0"+
    "\2\6\1\263\7\6\3\0\6\6\2\0\1\6\1\0"+
    "\1\6\1\264\6\6\31\0\12\6\3\0\3\6\1\265"+
    "\2\6\2\0\1\6\1\0\10\6\31\0\12\6\3\0"+
    "\6\6\2\0\1\6\1\0\10\6\20\0\1\266\10\0"+
    "\12\6\3\0\4\6\1\267\1\6\2\0\1\6\1\0"+
    "\10\6\31\0\12\6\3\0\6\6\2\0\1\6\1\0"+
    "\6\6\1\270\1\6\31\0\12\6\3\0\6\6\2\0"+
    "\1\6\1\0\10\6\31\0\1\271\11\6\3\0\6\6"+
    "\2\0\1\6\1\0\10\6\31\0\2\6\1\272\7\6"+
    "\3\0\5\6\1\273\2\0\1\6\1\0\10\6\31\0"+
    "\12\6\3\0\3\6\1\274\2\6\2\0\1\6\1\0"+
    "\10\6\31\0\12\6\3\0\6\6\2\0\1\6\1\0"+
    "\10\6\31\0\2\6\1\275\7\6\3\0\3\6\1\276"+
    "\2\6\2\0\1\6\1\0\10\6\31\0\12\6\3\0"+
    "\6\6\2\0\1\6\1\0\10\6\31\0\1\6\1\277"+
    "\10\6\3\0\6\6\2\0\1\6\1\0\10\6\31\0"+
    "\4\6\1\300\5\6\3\0\6\6\2\0\1\6\1\0"+
    "\4\6\1\301\3\6\31\0\12\6\3\0\6\6\2\0"+
    "\1\6\1\0\1\6\1\302\6\6\31\0\12\6\3\0"+
    "\6\6\2\0\1\6\1\0\1\303\7\6\31\0\12\6"+
    "\3\0\6\6\2\0\1\6\1\0\10\6\31\0\1\6"+
    "\1\304\10\6\3\0\1\6\1\305\4\6\2\0\1\6"+
    "\1\0\10\6\31\0\12\6\3\0\5\6\1\306\2\0"+
    "\1\6\1\0\10\6\31\0\12\6\3\0\6\6\2\0"+
    "\1\6\1\0\1\307\7\6\31\0\12\6\7\0\1\310"+
    "\63\0\5\6\1\311\2\0\1\6\1\0\10\6\31\0"+
    "\12\6\3\0\4\6\1\312\1\6\2\0\1\6\1\0"+
    "\10\6\31\0\12\6\3\0\1\6\1\313\4\6\2\0"+
    "\1\6\1\0\10\6\31\0\12\6\3\0\6\6\2\0"+
    "\1\6\1\0\1\314\7\6\31\0\12\6\3\0\3\6"+
    "\1\315\2\6\2\0\1\6\1\0\10\6\31\0\12\6"+
    "\3\0\6\6\2\0\1\6\1\0\1\316\7\6\31\0"+
    "\12\6\3\0\6\6\2\0\1\6\1\0\6\6\1\317"+
    "\1\6\31\0\12\6\3\0\3\6\1\320\2\6\2\0"+
    "\1\6\1\0\10\6\31\0\12\6\3\0\2\6\1\321"+
    "\3\6\2\0\1\6\1\0\10\6\31\0\12\6\3\0"+
    "\6\6\2\0\1\6\1\0\2\6\1\322\5\6\31\0"+
    "\12\6\56\0\1\323\14\0\6\6\2\0\1\6\1\0"+
    "\10\6\31\0\1\6\1\324\10\6\3\0\5\6\1\325"+
    "\2\0\1\6\1\0\10\6\31\0\12\6\3\0\1\6"+
    "\1\326\4\6\2\0\1\6\1\0\10\6\31\0\12\6"+
    "\3\0\2\6\1\327\3\6\2\0\1\6\1\0\10\6"+
    "\31\0\12\6\3\0\3\6\1\330\2\6\2\0\1\6"+
    "\1\0\10\6\31\0\12\6\60\0\1\331\12\0\3\6"+
    "\1\332\2\6\2\0\1\6\1\0\10\6\31\0\12\6"+
    "\3\0\6\6\2\0\1\6\1\0\1\6\1\333\6\6"+
    "\31\0\12\6\3\0\3\6\1\334\2\6\2\0\1\6"+
    "\1\0\10\6\31\0\12\6\3\0\6\6\2\0\1\6"+
    "\1\0\6\6\1\335\1\6\31\0\12\6\3\0\6\6"+
    "\2\0\1\6\1\0\1\6\1\336\6\6\31\0\12\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8848];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\10\1\1\11\12\1\1\11\1\1\1\11"+
    "\1\1\13\11\5\1\1\11\17\1\1\0\12\1\1\0"+
    "\1\11\3\0\1\1\1\0\7\11\45\1\1\0\75\1"+
    "\1\0\21\1\1\0\12\1\1\0\5\1\1\11\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[222];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _GlagolLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _GlagolLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 73: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 74: break;
          case 3: 
            { return G_ID;
            } 
            // fall through
          case 75: break;
          case 4: 
            { return G_INT;
            } 
            // fall through
          case 76: break;
          case 5: 
            { return G_DOT;
            } 
            // fall through
          case 77: break;
          case 6: 
            { return G_SYMBOL_NAME;
            } 
            // fall through
          case 78: break;
          case 7: 
            { return G_SLASH;
            } 
            // fall through
          case 79: break;
          case 8: 
            { return G_ASTERIX;
            } 
            // fall through
          case 80: break;
          case 9: 
            { return G_OP_EQ;
            } 
            // fall through
          case 81: break;
          case 10: 
            { return G_SEMICOLON;
            } 
            // fall through
          case 82: break;
          case 11: 
            { return G_COLON;
            } 
            // fall through
          case 83: break;
          case 12: 
            { return G_COMMA;
            } 
            // fall through
          case 84: break;
          case 13: 
            { return G_LEFT_BRACE;
            } 
            // fall through
          case 85: break;
          case 14: 
            { return G_RIGHT_BRACE;
            } 
            // fall through
          case 86: break;
          case 15: 
            { return G_LEFT_BRACKET;
            } 
            // fall through
          case 87: break;
          case 16: 
            { return G_RIGHT_BRACKET;
            } 
            // fall through
          case 88: break;
          case 17: 
            { return G_LEFT_PAREN;
            } 
            // fall through
          case 89: break;
          case 18: 
            { return G_RIGHT_PAREN;
            } 
            // fall through
          case 90: break;
          case 19: 
            { return G_AT;
            } 
            // fall through
          case 91: break;
          case 20: 
            { return G_MINUS;
            } 
            // fall through
          case 92: break;
          case 21: 
            { return G_PLUS;
            } 
            // fall through
          case 93: break;
          case 22: 
            { return G_PERCENT;
            } 
            // fall through
          case 94: break;
          case 23: 
            { return G_LT;
            } 
            // fall through
          case 95: break;
          case 24: 
            { return G_GT;
            } 
            // fall through
          case 96: break;
          case 25: 
            { return G_QUESTION_MARK;
            } 
            // fall through
          case 97: break;
          case 26: 
            { return G_KW_ALIAS;
            } 
            // fall through
          case 98: break;
          case 27: 
            { return G_STRING;
            } 
            // fall through
          case 99: break;
          case 28: 
            { return G_LINE_COMMENT;
            } 
            // fall through
          case 100: break;
          case 29: 
            { return G_EQ;
            } 
            // fall through
          case 101: break;
          case 30: 
            { return G_DOUBLE_COLON;
            } 
            // fall through
          case 102: break;
          case 31: 
            { return G_LTE;
            } 
            // fall through
          case 103: break;
          case 32: 
            { return G_GTE;
            } 
            // fall through
          case 104: break;
          case 33: 
            { return G_NON_EQ;
            } 
            // fall through
          case 105: break;
          case 34: 
            { return G_AND;
            } 
            // fall through
          case 106: break;
          case 35: 
            { return G_OR;
            } 
            // fall through
          case 107: break;
          case 36: 
            { return G_KW_IF;
            } 
            // fall through
          case 108: break;
          case 37: 
            { return G_REL_DIR;
            } 
            // fall through
          case 109: break;
          case 38: 
            { return G_KW_NEW;
            } 
            // fall through
          case 110: break;
          case 39: 
            { return G_DECIMAL;
            } 
            // fall through
          case 111: break;
          case 40: 
            { return G_KW_FOR;
            } 
            // fall through
          case 112: break;
          case 41: 
            { return G_TYPE_INT;
            } 
            // fall through
          case 113: break;
          case 42: 
            { return G_KW_GET;
            } 
            // fall through
          case 114: break;
          case 43: 
            { return G_TYPE_BOOL;
            } 
            // fall through
          case 115: break;
          case 44: 
            { return G_KW_ELSE;
            } 
            // fall through
          case 116: break;
          case 45: 
            { return G_BOOLEAN;
            } 
            // fall through
          case 117: break;
          case 46: 
            { return G_KW_THIS;
            } 
            // fall through
          case 118: break;
          case 47: 
            { return G_KW_REST;
            } 
            // fall through
          case 119: break;
          case 48: 
            { return G_KW_UTIL;
            } 
            // fall through
          case 120: break;
          case 49: 
            { return G_BLOCK_COMMENT;
            } 
            // fall through
          case 121: break;
          case 50: 
            { return G_TYPE_VOID;
            } 
            // fall through
          case 122: break;
          case 51: 
            { return G_KW_WHEN;
            } 
            // fall through
          case 123: break;
          case 52: 
            { return G_KW_BREAK;
            } 
            // fall through
          case 124: break;
          case 53: 
            { return G_TYPE_FLOAT;
            } 
            // fall through
          case 125: break;
          case 54: 
            { return G_KW_FLUSH;
            } 
            // fall through
          case 126: break;
          case 55: 
            { return G_KW_VALUE;
            } 
            // fall through
          case 127: break;
          case 56: 
            { return G_KW_ENTITY;
            } 
            // fall through
          case 128: break;
          case 57: 
            { return G_KW_RETURN;
            } 
            // fall through
          case 129: break;
          case 58: 
            { return G_KW_REMOVE;
            } 
            // fall through
          case 130: break;
          case 59: 
            { return G_KW_SELFIE;
            } 
            // fall through
          case 131: break;
          case 60: 
            { return G_TYPE_STRING;
            } 
            // fall through
          case 132: break;
          case 61: 
            { return G_KW_PUBLIC;
            } 
            // fall through
          case 133: break;
          case 62: 
            { return G_KW_IMPORT;
            } 
            // fall through
          case 134: break;
          case 63: 
            { return G_KW_SERVICE;
            } 
            // fall through
          case 135: break;
          case 64: 
            { return G_KW_PERSIST;
            } 
            // fall through
          case 136: break;
          case 65: 
            { return G_KW_PRIMARY;
            } 
            // fall through
          case 137: break;
          case 66: 
            { return G_KW_PRIVATE;
            } 
            // fall through
          case 138: break;
          case 67: 
            { return G_KW_REL;
            } 
            // fall through
          case 139: break;
          case 68: 
            { return G_KW_CONTINUE;
            } 
            // fall through
          case 140: break;
          case 69: 
            { return G_KW_JSON_API;
            } 
            // fall through
          case 141: break;
          case 70: 
            { return G_KW_NS;
            } 
            // fall through
          case 142: break;
          case 71: 
            { return G_KW_REPOSITORY;
            } 
            // fall through
          case 143: break;
          case 72: 
            { return G_KW_CONTROLLER;
            } 
            // fall through
          case 144: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
