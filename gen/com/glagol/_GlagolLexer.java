/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.glagol;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.glagol.psi.GlagolTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_GlagolLexer.flex</tt>
 */
public class _GlagolLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\4\1\22\0\1\2\1\50\1\25\2\0\1\45\1\51\1\23\1\40\1\41\1\27\1\44\1"+
    "\33\1\43\1\12\1\26\12\11\1\32\1\31\1\46\1\30\1\47\1\53\1\42\1\106\1\103\1"+
    "\72\1\102\1\70\1\74\1\13\1\101\1\105\2\13\1\71\1\77\1\107\1\76\2\13\1\75\1"+
    "\67\1\73\1\110\1\13\1\100\1\13\1\104\1\13\1\36\1\24\1\37\1\0\1\14\1\0\1\7"+
    "\1\3\1\56\1\111\1\6\1\20\1\62\1\64\1\57\1\66\1\65\1\5\1\54\1\10\1\4\1\55\1"+
    "\22\1\16\1\21\1\15\1\17\1\61\1\63\1\22\1\60\1\22\1\34\1\52\1\35\7\0\1\1\32"+
    "\0\1\2\337\0\1\2\177\0\13\2\35\0\2\1\5\0\1\2\57\0\1\2\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\5\3\1\4\1\5\1\6\5\3"+
    "\2\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\3\1\1\31\7\3\12\6\4\3"+
    "\1\32\2\3\1\0\11\3\1\0\1\33\3\0\1\34"+
    "\1\0\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\5\3\1\47\6\3\4\6\1\50"+
    "\2\6\1\51\1\52\4\6\4\3\1\53\1\3\1\54"+
    "\10\3\1\55\6\3\1\33\1\0\4\3\1\56\3\3"+
    "\1\57\2\3\7\6\1\60\1\61\1\62\1\6\1\63"+
    "\1\3\1\64\2\3\1\65\1\66\2\3\1\67\2\3"+
    "\1\70\5\3\1\71\6\3\1\72\1\3\1\73\1\3"+
    "\2\6\1\74\3\6\1\75\1\76\1\3\1\77\6\3"+
    "\1\100\1\101\12\3\1\102\1\0\1\6\1\103\1\6"+
    "\1\104\1\105\1\3\1\106\2\3\1\107\1\110\1\3"+
    "\1\111\1\3\1\112\3\3\1\113\2\3\1\114\1\0"+
    "\1\115\1\116\1\63\3\3\1\117\1\120\1\121\1\122"+
    "\2\3\1\0\1\3\1\123\2\3\1\124\1\125\1\126"+
    "\2\3\1\127\1\130";

  private static int [] zzUnpackAction() {
    int [] result = new int[268];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\112\0\224\0\336\0\u0128\0\u0172\0\u01bc\0\u0206"+
    "\0\u0250\0\112\0\u029a\0\u02e4\0\u032e\0\u0378\0\u03c2\0\u040c"+
    "\0\u0456\0\u04a0\0\u04ea\0\112\0\u0534\0\112\0\u057e\0\112"+
    "\0\112\0\112\0\112\0\112\0\112\0\112\0\112\0\112"+
    "\0\u05c8\0\112\0\u0612\0\u065c\0\u06a6\0\u06f0\0\u073a\0\112"+
    "\0\u0784\0\u07ce\0\u0818\0\u0862\0\u08ac\0\u08f6\0\u0940\0\u098a"+
    "\0\u09d4\0\u0a1e\0\u0a68\0\u0ab2\0\u0afc\0\u0b46\0\u0b90\0\u0bda"+
    "\0\u0c24\0\u0c6e\0\u0cb8\0\u0d02\0\u0d4c\0\u0128\0\u0d96\0\u0de0"+
    "\0\u0e2a\0\u0e74\0\u0ebe\0\u0f08\0\u0f52\0\u0f9c\0\u0fe6\0\u1030"+
    "\0\u107a\0\u10c4\0\u0456\0\112\0\u110e\0\u04a0\0\u1158\0\u11a2"+
    "\0\u11ec\0\112\0\112\0\112\0\112\0\112\0\112\0\112"+
    "\0\112\0\112\0\112\0\u1236\0\u1280\0\u12ca\0\u1314\0\u135e"+
    "\0\u0128\0\u13a8\0\u13f2\0\u143c\0\u1486\0\u14d0\0\u151a\0\u1564"+
    "\0\u15ae\0\u15f8\0\u1642\0\u168c\0\u16d6\0\u1720\0\u029a\0\u029a"+
    "\0\u176a\0\u17b4\0\u17fe\0\u1848\0\u1892\0\u18dc\0\u1926\0\u1970"+
    "\0\u0128\0\u19ba\0\u0e2a\0\u1a04\0\u1a4e\0\u1a98\0\u1ae2\0\u1b2c"+
    "\0\u1b76\0\u1bc0\0\u1c0a\0\u0128\0\u1c54\0\u1c9e\0\u1ce8\0\u1d32"+
    "\0\u1d7c\0\u1dc6\0\u04a0\0\u1e10\0\u1e5a\0\u1ea4\0\u1eee\0\u1f38"+
    "\0\u0128\0\u1f82\0\u1fcc\0\u2016\0\u0128\0\u2060\0\u20aa\0\u20f4"+
    "\0\u213e\0\u2188\0\u21d2\0\u221c\0\u2266\0\u22b0\0\u029a\0\u029a"+
    "\0\u029a\0\u22fa\0\u2344\0\u238e\0\u0128\0\u23d8\0\u2422\0\u0128"+
    "\0\u0128\0\u246c\0\u24b6\0\u0128\0\u2500\0\u254a\0\u0128\0\u2594"+
    "\0\u25de\0\u2628\0\u2672\0\u26bc\0\u11ec\0\u2706\0\u2750\0\u279a"+
    "\0\u27e4\0\u282e\0\u2878\0\u0128\0\u28c2\0\u0128\0\u290c\0\u2956"+
    "\0\u29a0\0\u029a\0\u29ea\0\u2a34\0\u2a7e\0\u029a\0\u029a\0\u2ac8"+
    "\0\u0128\0\u2b12\0\u2b5c\0\u2ba6\0\u2bf0\0\u2c3a\0\u2c84\0\u0128"+
    "\0\u0128\0\u2cce\0\u2d18\0\u2d62\0\u2dac\0\u2df6\0\u2e40\0\u2e8a"+
    "\0\u2ed4\0\u2f1e\0\u2f68\0\u0128\0\u2fb2\0\u2ffc\0\u029a\0\u3046"+
    "\0\u029a\0\u029a\0\u3090\0\u0128\0\u30da\0\u3124\0\u0128\0\u0128"+
    "\0\u316e\0\u0128\0\u31b8\0\u0128\0\u3202\0\u324c\0\u3296\0\u0128"+
    "\0\u32e0\0\u332a\0\u0128\0\u3374\0\u029a\0\u029a\0\u0128\0\u33be"+
    "\0\u3408\0\u3452\0\u0128\0\u0128\0\u0128\0\u0128\0\u349c\0\u34e6"+
    "\0\u3530\0\u357a\0\u0128\0\u35c4\0\u360e\0\u0128\0\112\0\u0128"+
    "\0\u3658\0\u36a2\0\u0128\0\u0128";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[268];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\2\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\2\1\14\1\15\1\16\1\17\1\20"+
    "\1\5\1\21\1\2\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\5\1\51\1\52\1\53\1\5\1\54"+
    "\1\55\1\56\2\5\1\57\1\60\1\13\1\61\2\13"+
    "\1\62\1\13\1\63\1\13\1\64\1\13\1\65\1\66"+
    "\1\13\1\67\1\70\1\71\1\13\1\5\113\0\2\3"+
    "\112\0\1\5\1\72\4\5\2\0\1\5\1\0\1\5"+
    "\1\73\4\5\31\0\36\5\3\0\6\5\2\0\1\5"+
    "\1\0\6\5\31\0\36\5\3\0\2\5\1\74\2\5"+
    "\1\75\2\0\1\5\1\0\6\5\31\0\36\5\3\0"+
    "\6\5\2\0\1\5\1\0\4\5\1\76\1\5\31\0"+
    "\36\5\3\0\3\5\1\77\1\100\1\5\2\0\1\5"+
    "\1\0\6\5\31\0\36\5\11\0\1\11\1\101\102\0"+
    "\7\13\1\0\10\13\31\0\36\13\3\0\6\5\2\0"+
    "\1\5\1\0\1\5\1\102\4\5\31\0\10\5\1\103"+
    "\25\5\3\0\3\5\1\104\2\5\2\0\1\5\1\0"+
    "\6\5\31\0\36\5\3\0\6\5\2\0\1\5\1\0"+
    "\1\105\5\5\31\0\36\5\3\0\1\5\1\106\1\107"+
    "\1\5\1\110\1\5\2\0\1\5\1\0\6\5\31\0"+
    "\36\5\3\0\3\5\1\111\2\5\2\0\1\5\1\0"+
    "\1\112\5\5\31\0\36\5\23\113\1\114\1\115\65\113"+
    "\24\116\1\117\1\114\64\116\26\0\1\120\1\121\112\0"+
    "\1\122\113\0\1\123\123\0\1\124\75\0\1\125\15\0"+
    "\1\126\73\0\1\127\16\0\1\130\72\0\1\131\132\0"+
    "\1\132\112\0\1\133\42\0\3\5\1\134\2\5\2\0"+
    "\1\5\1\0\1\5\1\135\1\136\3\5\31\0\36\5"+
    "\3\0\1\5\1\137\4\5\2\0\1\5\1\0\6\5"+
    "\31\0\36\5\3\0\5\5\1\140\2\0\1\5\1\0"+
    "\3\5\1\141\2\5\31\0\1\142\35\5\3\0\1\5"+
    "\1\143\2\5\1\144\1\5\2\0\1\5\1\0\6\5"+
    "\31\0\36\5\3\0\3\5\1\145\2\5\2\0\1\5"+
    "\1\0\6\5\31\0\36\5\3\0\6\5\2\0\1\5"+
    "\1\0\6\5\31\0\10\5\1\146\25\5\3\0\6\5"+
    "\2\0\1\5\1\0\4\5\1\147\1\5\31\0\36\5"+
    "\3\0\7\13\1\0\10\13\31\0\14\13\1\150\21\13"+
    "\3\0\7\13\1\0\10\13\31\0\31\13\1\151\4\13"+
    "\3\0\7\13\1\0\10\13\31\0\21\13\1\152\14\13"+
    "\3\0\7\13\1\0\10\13\31\0\20\13\1\153\1\154"+
    "\14\13\3\0\7\13\1\0\10\13\31\0\25\13\1\155"+
    "\10\13\3\0\7\13\1\0\10\13\31\0\14\13\1\156"+
    "\21\13\3\0\7\13\1\0\10\13\31\0\30\13\1\157"+
    "\5\13\3\0\7\13\1\0\10\13\31\0\13\13\1\160"+
    "\22\13\3\0\7\13\1\0\10\13\31\0\13\13\1\161"+
    "\17\13\1\162\2\13\3\0\7\13\1\0\10\13\31\0"+
    "\22\13\1\163\11\13\1\164\1\13\3\0\1\5\1\165"+
    "\4\5\2\0\1\5\1\0\6\5\31\0\36\5\3\0"+
    "\3\5\1\166\2\5\2\0\1\5\1\0\6\5\31\0"+
    "\36\5\3\0\6\5\2\0\1\5\1\0\4\5\1\167"+
    "\1\5\31\0\36\5\3\0\6\5\2\0\1\5\1\0"+
    "\1\170\5\5\31\0\36\5\3\0\6\5\2\0\1\5"+
    "\1\0\6\5\31\0\7\5\1\171\26\5\3\0\6\5"+
    "\2\0\1\5\1\0\6\5\31\0\1\172\35\5\11\0"+
    "\1\173\103\0\6\5\2\0\1\5\1\0\2\5\1\174"+
    "\3\5\31\0\36\5\3\0\6\5\2\0\1\5\1\0"+
    "\6\5\31\0\3\5\1\175\32\5\3\0\2\5\1\176"+
    "\3\5\2\0\1\5\1\0\1\177\3\5\1\200\1\5"+
    "\31\0\1\201\1\202\34\5\3\0\6\5\2\0\1\5"+
    "\1\0\6\5\31\0\3\5\1\203\32\5\3\0\6\5"+
    "\2\0\1\5\1\0\1\5\1\204\4\5\31\0\36\5"+
    "\3\0\1\5\1\205\4\5\2\0\1\5\1\0\2\5"+
    "\1\206\3\5\31\0\36\5\3\0\2\5\1\207\3\5"+
    "\2\0\1\5\1\0\6\5\31\0\36\5\3\0\2\5"+
    "\1\210\3\5\2\0\1\5\1\0\1\5\1\211\4\5"+
    "\31\0\36\5\3\0\6\5\2\0\1\5\1\0\1\5"+
    "\1\212\4\5\31\0\36\5\1\113\1\0\110\113\24\116"+
    "\1\117\1\213\64\116\1\120\1\0\110\120\27\121\1\214"+
    "\62\121\3\0\6\5\2\0\1\5\1\0\1\5\1\215"+
    "\4\5\31\0\36\5\3\0\6\5\2\0\1\5\1\0"+
    "\6\5\31\0\3\5\1\216\32\5\3\0\1\217\5\5"+
    "\2\0\1\5\1\0\6\5\31\0\36\5\3\0\5\5"+
    "\1\220\2\0\1\5\1\0\6\5\31\0\36\5\3\0"+
    "\6\5\2\0\1\5\1\0\1\221\5\5\31\0\36\5"+
    "\3\0\6\5\2\0\1\5\1\0\6\5\31\0\1\5"+
    "\1\222\34\5\3\0\6\5\2\0\1\5\1\0\6\5"+
    "\31\0\3\5\1\223\32\5\3\0\2\5\1\224\3\5"+
    "\2\0\1\5\1\0\6\5\31\0\36\5\3\0\6\5"+
    "\2\0\1\5\1\0\1\225\5\5\31\0\36\5\3\0"+
    "\3\5\1\226\2\5\2\0\1\5\1\0\6\5\31\0"+
    "\36\5\3\0\1\5\1\227\4\5\2\0\1\5\1\0"+
    "\6\5\31\0\36\5\3\0\7\13\1\0\10\13\31\0"+
    "\15\13\1\230\20\13\3\0\7\13\1\0\10\13\31\0"+
    "\23\13\1\231\12\13\3\0\7\13\1\0\10\13\31\0"+
    "\22\13\1\232\13\13\3\0\7\13\1\0\10\13\31\0"+
    "\20\13\1\233\15\13\3\0\7\13\1\0\10\13\31\0"+
    "\26\13\1\234\7\13\3\0\7\13\1\0\10\13\31\0"+
    "\14\13\1\235\21\13\3\0\7\13\1\0\10\13\31\0"+
    "\13\13\1\236\22\13\3\0\7\13\1\0\10\13\31\0"+
    "\16\13\1\237\17\13\3\0\7\13\1\0\10\13\31\0"+
    "\26\13\1\240\7\13\3\0\7\13\1\0\10\13\31\0"+
    "\17\13\1\241\16\13\3\0\7\13\1\0\10\13\31\0"+
    "\15\13\1\242\20\13\3\0\2\5\1\243\3\5\2\0"+
    "\1\5\1\0\6\5\31\0\36\5\3\0\4\5\1\244"+
    "\1\5\2\0\1\5\1\0\6\5\31\0\36\5\3\0"+
    "\3\5\1\245\2\5\2\0\1\5\1\0\6\5\31\0"+
    "\36\5\3\0\6\5\2\0\1\5\1\0\6\5\31\0"+
    "\3\5\1\246\32\5\3\0\3\5\1\247\2\5\2\0"+
    "\1\5\1\0\6\5\31\0\36\5\3\0\3\5\1\250"+
    "\2\5\2\0\1\5\1\0\6\5\31\0\36\5\3\0"+
    "\6\5\2\0\1\5\1\0\4\5\1\251\1\5\31\0"+
    "\36\5\3\0\4\5\1\252\1\5\2\0\1\5\1\0"+
    "\6\5\31\0\36\5\3\0\6\5\2\0\1\5\1\0"+
    "\2\5\1\253\3\5\31\0\36\5\3\0\6\5\2\0"+
    "\1\5\1\0\1\254\5\5\31\0\36\5\3\0\1\5"+
    "\1\255\4\5\2\0\1\5\1\0\6\5\31\0\36\5"+
    "\3\0\1\5\1\256\4\5\2\0\1\5\1\0\6\5"+
    "\31\0\36\5\3\0\2\5\1\257\3\5\2\0\1\5"+
    "\1\0\6\5\31\0\36\5\3\0\4\5\1\260\1\5"+
    "\2\0\1\5\1\0\6\5\31\0\36\5\3\0\6\5"+
    "\2\0\1\5\1\0\4\5\1\261\1\5\31\0\36\5"+
    "\3\0\6\5\2\0\1\5\1\0\4\5\1\174\1\5"+
    "\31\0\36\5\3\0\6\5\2\0\1\5\1\0\3\5"+
    "\1\262\2\5\31\0\36\5\3\0\6\5\2\0\1\5"+
    "\1\0\6\5\31\0\5\5\1\263\30\5\3\0\6\5"+
    "\2\0\1\5\1\0\6\5\31\0\3\5\1\264\32\5"+
    "\26\121\1\265\1\214\62\121\3\0\6\5\2\0\1\5"+
    "\1\0\4\5\1\266\1\5\31\0\36\5\3\0\6\5"+
    "\2\0\1\5\1\0\6\5\31\0\1\267\4\5\1\270"+
    "\30\5\3\0\2\5\1\271\3\5\2\0\1\5\1\0"+
    "\6\5\31\0\36\5\3\0\6\5\2\0\1\5\1\0"+
    "\1\272\5\5\31\0\36\5\3\0\1\5\1\273\4\5"+
    "\2\0\1\5\1\0\6\5\31\0\36\5\3\0\6\5"+
    "\2\0\1\5\1\0\6\5\31\0\35\5\1\274\3\0"+
    "\6\5\2\0\1\5\1\0\2\5\1\275\3\5\31\0"+
    "\36\5\3\0\5\5\1\276\2\0\1\5\1\0\6\5"+
    "\31\0\36\5\3\0\5\5\1\277\2\0\1\5\1\0"+
    "\6\5\31\0\36\5\3\0\7\13\1\0\10\13\31\0"+
    "\14\13\1\300\21\13\3\0\7\13\1\0\10\13\31\0"+
    "\31\13\1\301\4\13\3\0\7\13\1\0\10\13\31\0"+
    "\23\13\1\302\12\13\3\0\7\13\1\0\10\13\31\0"+
    "\13\13\1\303\22\13\3\0\7\13\1\0\10\13\31\0"+
    "\14\13\1\304\21\13\3\0\7\13\1\0\10\13\31\0"+
    "\21\13\1\305\14\13\3\0\7\13\1\0\10\13\31\0"+
    "\16\13\1\306\17\13\3\0\7\13\1\0\10\13\31\0"+
    "\15\13\1\307\20\13\3\0\3\5\1\310\2\5\2\0"+
    "\1\5\1\0\6\5\31\0\36\5\3\0\6\5\2\0"+
    "\1\5\1\0\6\5\31\0\11\5\1\311\24\5\3\0"+
    "\6\5\2\0\1\5\1\0\1\312\5\5\31\0\36\5"+
    "\3\0\6\5\2\0\1\5\1\0\4\5\1\313\1\5"+
    "\31\0\36\5\3\0\6\5\2\0\1\5\1\0\1\314"+
    "\5\5\31\0\36\5\3\0\6\5\2\0\1\5\1\0"+
    "\1\5\1\315\4\5\31\0\36\5\3\0\6\5\2\0"+
    "\1\5\1\0\6\5\31\0\5\5\1\316\30\5\3\0"+
    "\6\5\2\0\1\5\1\0\4\5\1\317\1\5\31\0"+
    "\36\5\3\0\6\5\2\0\1\5\1\0\1\320\5\5"+
    "\31\0\36\5\3\0\6\5\2\0\1\5\1\0\6\5"+
    "\31\0\10\5\1\321\25\5\3\0\6\5\2\0\1\5"+
    "\1\0\6\5\31\0\3\5\1\322\32\5\3\0\6\5"+
    "\2\0\1\5\1\0\6\5\31\0\3\5\1\323\32\5"+
    "\3\0\5\5\1\324\2\0\1\5\1\0\6\5\31\0"+
    "\36\5\3\0\6\5\2\0\1\5\1\0\6\5\31\0"+
    "\3\5\1\325\32\5\3\0\4\5\1\326\1\5\2\0"+
    "\1\5\1\0\6\5\31\0\36\5\3\0\4\5\1\327"+
    "\1\5\2\0\1\5\1\0\6\5\31\0\36\5\3\0"+
    "\6\5\2\0\1\5\1\0\6\5\31\0\3\5\1\330"+
    "\32\5\3\0\6\5\2\0\1\5\1\0\1\5\1\331"+
    "\4\5\31\0\3\5\1\332\32\5\3\0\6\5\2\0"+
    "\1\5\1\0\1\5\1\333\4\5\31\0\36\5\3\0"+
    "\3\5\1\334\2\5\2\0\1\5\1\0\6\5\31\0"+
    "\36\5\3\0\6\5\2\0\1\5\1\0\6\5\20\0"+
    "\1\335\10\0\36\5\3\0\7\13\1\0\10\13\31\0"+
    "\16\13\1\336\17\13\3\0\7\13\1\0\10\13\31\0"+
    "\17\13\1\337\16\13\3\0\7\13\1\0\10\13\31\0"+
    "\14\13\1\340\21\13\3\0\7\13\1\0\10\13\31\0"+
    "\21\13\1\341\14\13\3\0\7\13\1\0\10\13\31\0"+
    "\14\13\1\342\21\13\3\0\4\5\1\343\1\5\2\0"+
    "\1\5\1\0\6\5\31\0\36\5\3\0\6\5\2\0"+
    "\1\5\1\0\6\5\31\0\4\5\1\344\31\5\3\0"+
    "\6\5\2\0\1\5\1\0\6\5\31\0\1\5\1\345"+
    "\34\5\3\0\6\5\2\0\1\5\1\0\6\5\31\0"+
    "\3\5\1\346\32\5\3\0\5\5\1\347\2\0\1\5"+
    "\1\0\6\5\31\0\36\5\3\0\3\5\1\350\2\5"+
    "\2\0\1\5\1\0\6\5\31\0\36\5\3\0\6\5"+
    "\2\0\1\5\1\0\6\5\31\0\3\5\1\351\32\5"+
    "\3\0\3\5\1\352\2\5\2\0\1\5\1\0\6\5"+
    "\31\0\36\5\3\0\6\5\2\0\1\5\1\0\6\5"+
    "\31\0\2\5\1\353\33\5\3\0\6\5\2\0\1\5"+
    "\1\0\6\5\31\0\6\5\1\354\27\5\3\0\6\5"+
    "\2\0\1\5\1\0\4\5\1\355\1\5\31\0\36\5"+
    "\3\0\6\5\2\0\1\5\1\0\1\5\1\356\4\5"+
    "\31\0\36\5\3\0\6\5\2\0\1\5\1\0\1\357"+
    "\5\5\31\0\36\5\3\0\6\5\2\0\1\5\1\0"+
    "\6\5\31\0\2\5\1\360\33\5\3\0\1\5\1\361"+
    "\4\5\2\0\1\5\1\0\6\5\31\0\36\5\3\0"+
    "\5\5\1\362\2\0\1\5\1\0\6\5\31\0\36\5"+
    "\3\0\6\5\2\0\1\5\1\0\1\363\5\5\31\0"+
    "\36\5\7\0\1\364\105\0\7\13\1\0\10\13\31\0"+
    "\17\13\1\365\16\13\3\0\7\13\1\0\10\13\31\0"+
    "\17\13\1\366\16\13\3\0\5\5\1\367\2\0\1\5"+
    "\1\0\6\5\31\0\36\5\3\0\4\5\1\370\1\5"+
    "\2\0\1\5\1\0\6\5\31\0\36\5\3\0\1\5"+
    "\1\371\4\5\2\0\1\5\1\0\6\5\31\0\36\5"+
    "\3\0\6\5\2\0\1\5\1\0\1\372\5\5\31\0"+
    "\36\5\3\0\3\5\1\373\2\5\2\0\1\5\1\0"+
    "\6\5\31\0\36\5\3\0\6\5\2\0\1\5\1\0"+
    "\1\374\5\5\31\0\36\5\3\0\6\5\2\0\1\5"+
    "\1\0\6\5\31\0\4\5\1\375\31\5\3\0\3\5"+
    "\1\376\2\5\2\0\1\5\1\0\6\5\31\0\36\5"+
    "\3\0\2\5\1\377\3\5\2\0\1\5\1\0\6\5"+
    "\31\0\36\5\3\0\6\5\2\0\1\5\1\0\2\5"+
    "\1\u0100\3\5\31\0\36\5\55\0\1\u0101\37\0\6\5"+
    "\2\0\1\5\1\0\6\5\31\0\2\5\1\u0102\33\5"+
    "\3\0\5\5\1\u0103\2\0\1\5\1\0\6\5\31\0"+
    "\36\5\3\0\1\5\1\u0104\4\5\2\0\1\5\1\0"+
    "\6\5\31\0\36\5\3\0\2\5\1\u0105\3\5\2\0"+
    "\1\5\1\0\6\5\31\0\36\5\3\0\3\5\1\u0106"+
    "\2\5\2\0\1\5\1\0\6\5\31\0\36\5\57\0"+
    "\1\u0107\35\0\3\5\1\u0108\2\5\2\0\1\5\1\0"+
    "\6\5\31\0\36\5\3\0\6\5\2\0\1\5\1\0"+
    "\1\5\1\u0109\4\5\31\0\36\5\3\0\3\5\1\u010a"+
    "\2\5\2\0\1\5\1\0\6\5\31\0\36\5\3\0"+
    "\6\5\2\0\1\5\1\0\6\5\31\0\4\5\1\u010b"+
    "\31\5\3\0\6\5\2\0\1\5\1\0\1\5\1\u010c"+
    "\4\5\31\0\36\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14060];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\7\1\1\11\11\1\1\11\1\1\1\11"+
    "\1\1\11\11\1\1\1\11\5\1\1\11\30\1\1\0"+
    "\11\1\1\0\1\11\3\0\1\1\1\0\12\11\60\1"+
    "\1\0\120\1\1\0\26\1\1\0\14\1\1\0\5\1"+
    "\1\11\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[268];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _GlagolLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _GlagolLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 89: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 90: break;
          case 3: 
            { return G_ID;
            } 
            // fall through
          case 91: break;
          case 4: 
            { return G_INT;
            } 
            // fall through
          case 92: break;
          case 5: 
            { return G_DOT;
            } 
            // fall through
          case 93: break;
          case 6: 
            { return G_SYMBOL_NAME;
            } 
            // fall through
          case 94: break;
          case 7: 
            { return G_SLASH;
            } 
            // fall through
          case 95: break;
          case 8: 
            { return G_ASTERIX;
            } 
            // fall through
          case 96: break;
          case 9: 
            { return G_OP_EQ;
            } 
            // fall through
          case 97: break;
          case 10: 
            { return G_SEMICOLON;
            } 
            // fall through
          case 98: break;
          case 11: 
            { return G_COLON;
            } 
            // fall through
          case 99: break;
          case 12: 
            { return G_COMMA;
            } 
            // fall through
          case 100: break;
          case 13: 
            { return G_LEFT_BRACE;
            } 
            // fall through
          case 101: break;
          case 14: 
            { return G_RIGHT_BRACE;
            } 
            // fall through
          case 102: break;
          case 15: 
            { return G_LEFT_BRACKET;
            } 
            // fall through
          case 103: break;
          case 16: 
            { return G_RIGHT_BRACKET;
            } 
            // fall through
          case 104: break;
          case 17: 
            { return G_LEFT_PAREN;
            } 
            // fall through
          case 105: break;
          case 18: 
            { return G_RIGHT_PAREN;
            } 
            // fall through
          case 106: break;
          case 19: 
            { return G_AT;
            } 
            // fall through
          case 107: break;
          case 20: 
            { return G_MINUS;
            } 
            // fall through
          case 108: break;
          case 21: 
            { return G_PLUS;
            } 
            // fall through
          case 109: break;
          case 22: 
            { return G_PERCENT;
            } 
            // fall through
          case 110: break;
          case 23: 
            { return G_LT;
            } 
            // fall through
          case 111: break;
          case 24: 
            { return G_GT;
            } 
            // fall through
          case 112: break;
          case 25: 
            { return G_QUESTION_MARK;
            } 
            // fall through
          case 113: break;
          case 26: 
            { return G_KW_ALIAS;
            } 
            // fall through
          case 114: break;
          case 27: 
            { return G_STRING;
            } 
            // fall through
          case 115: break;
          case 28: 
            { return G_LINE_COMMENT;
            } 
            // fall through
          case 116: break;
          case 29: 
            { return G_EQ;
            } 
            // fall through
          case 117: break;
          case 30: 
            { return G_DOUBLE_COLON;
            } 
            // fall through
          case 118: break;
          case 31: 
            { return G_CONCAT;
            } 
            // fall through
          case 119: break;
          case 32: 
            { return G_LTE;
            } 
            // fall through
          case 120: break;
          case 33: 
            { return G_QEXPR_START;
            } 
            // fall through
          case 121: break;
          case 34: 
            { return G_GTE;
            } 
            // fall through
          case 122: break;
          case 35: 
            { return G_QEXPR_END;
            } 
            // fall through
          case 123: break;
          case 36: 
            { return G_NON_EQ;
            } 
            // fall through
          case 124: break;
          case 37: 
            { return G_AND;
            } 
            // fall through
          case 125: break;
          case 38: 
            { return G_OR;
            } 
            // fall through
          case 126: break;
          case 39: 
            { return G_KW_IF;
            } 
            // fall through
          case 127: break;
          case 40: 
            { return G_KW_OR;
            } 
            // fall through
          case 128: break;
          case 41: 
            { return G_KW_BY;
            } 
            // fall through
          case 129: break;
          case 42: 
            { return G_KW_IS;
            } 
            // fall through
          case 130: break;
          case 43: 
            { return G_KW_NEW;
            } 
            // fall through
          case 131: break;
          case 44: 
            { return G_DECIMAL;
            } 
            // fall through
          case 132: break;
          case 45: 
            { return G_KW_FOR;
            } 
            // fall through
          case 133: break;
          case 46: 
            { return G_TYPE_INT;
            } 
            // fall through
          case 134: break;
          case 47: 
            { return G_KW_GET;
            } 
            // fall through
          case 135: break;
          case 48: 
            { return G_KW_ASC;
            } 
            // fall through
          case 136: break;
          case 49: 
            { return G_KW_AND;
            } 
            // fall through
          case 137: break;
          case 50: 
            { return G_KW_NOT;
            } 
            // fall through
          case 138: break;
          case 51: 
            { return G_TYPE_BOOL;
            } 
            // fall through
          case 139: break;
          case 52: 
            { return G_KW_ELSE;
            } 
            // fall through
          case 140: break;
          case 53: 
            { return G_BOOLEAN;
            } 
            // fall through
          case 141: break;
          case 54: 
            { return G_KW_THIS;
            } 
            // fall through
          case 142: break;
          case 55: 
            { return G_KW_REST;
            } 
            // fall through
          case 143: break;
          case 56: 
            { return G_KW_UTIL;
            } 
            // fall through
          case 144: break;
          case 57: 
            { return G_BLOCK_COMMENT;
            } 
            // fall through
          case 145: break;
          case 58: 
            { return G_TYPE_VOID;
            } 
            // fall through
          case 146: break;
          case 59: 
            { return G_KW_WHEN;
            } 
            // fall through
          case 147: break;
          case 60: 
            { return G_KW_FROM;
            } 
            // fall through
          case 148: break;
          case 61: 
            { return G_KW_DESC;
            } 
            // fall through
          case 149: break;
          case 62: 
            { return G_KW_NULL;
            } 
            // fall through
          case 150: break;
          case 63: 
            { return G_KW_BREAK;
            } 
            // fall through
          case 151: break;
          case 64: 
            { return G_TYPE_FLOAT;
            } 
            // fall through
          case 152: break;
          case 65: 
            { return G_KW_FLUSH;
            } 
            // fall through
          case 153: break;
          case 66: 
            { return G_KW_VALUE;
            } 
            // fall through
          case 154: break;
          case 67: 
            { return G_KW_LIMIT;
            } 
            // fall through
          case 155: break;
          case 68: 
            { return G_KW_ORDER;
            } 
            // fall through
          case 156: break;
          case 69: 
            { return G_KW_WHERE;
            } 
            // fall through
          case 157: break;
          case 70: 
            { return G_KW_ENTITY;
            } 
            // fall through
          case 158: break;
          case 71: 
            { return G_KW_RETURN;
            } 
            // fall through
          case 159: break;
          case 72: 
            { return G_KW_REMOVE;
            } 
            // fall through
          case 160: break;
          case 73: 
            { return G_KW_SELFIE;
            } 
            // fall through
          case 161: break;
          case 74: 
            { return G_TYPE_STRING;
            } 
            // fall through
          case 162: break;
          case 75: 
            { return G_KW_PUBLIC;
            } 
            // fall through
          case 163: break;
          case 76: 
            { return G_KW_IMPORT;
            } 
            // fall through
          case 164: break;
          case 77: 
            { return G_KW_SELECT;
            } 
            // fall through
          case 165: break;
          case 78: 
            { return G_KW_OFFSET;
            } 
            // fall through
          case 166: break;
          case 79: 
            { return G_KW_SERVICE;
            } 
            // fall through
          case 167: break;
          case 80: 
            { return G_KW_PERSIST;
            } 
            // fall through
          case 168: break;
          case 81: 
            { return G_KW_PRIMARY;
            } 
            // fall through
          case 169: break;
          case 82: 
            { return G_KW_PRIVATE;
            } 
            // fall through
          case 170: break;
          case 83: 
            { return G_KW_REL;
            } 
            // fall through
          case 171: break;
          case 84: 
            { return G_KW_CONTINUE;
            } 
            // fall through
          case 172: break;
          case 85: 
            { return G_KW_JSON_API;
            } 
            // fall through
          case 173: break;
          case 86: 
            { return G_KW_NS;
            } 
            // fall through
          case 174: break;
          case 87: 
            { return G_KW_REPOSITORY;
            } 
            // fall through
          case 175: break;
          case 88: 
            { return G_KW_CONTROLLER;
            } 
            // fall through
          case 176: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
