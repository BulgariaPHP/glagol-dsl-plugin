/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package com.glagol;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static com.glagol.psi.GlagolTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_GlagolLexer.flex</tt>
 */
public class _GlagolLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\1\1\32\2\1\22\0\1\2\1\0\1\33\4\0\1\31\1\46\1\47\1\35\1\0\1\41"+
    "\1\0\1\4\1\34\12\3\1\40\1\37\1\50\1\36\1\51\1\0\1\60\32\30\1\44\1\27\1\45"+
    "\1\0\1\30\1\0\1\6\1\57\1\14\1\52\1\10\1\26\1\56\1\55\1\20\1\30\1\24\1\23\1"+
    "\7\1\5\1\22\1\17\1\12\1\25\1\11\1\15\1\13\1\53\1\54\1\61\1\16\1\21\1\42\1"+
    "\0\1\43\7\0\1\32\242\0\2\32\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\17\4\4\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\2\1\3\4\1\1\1\0\1\4\1\17\22\4\2\0"+
    "\1\20\2\0\1\21\1\0\1\22\1\23\3\4\3\0"+
    "\1\24\6\4\1\25\3\4\1\26\1\27\1\30\4\4"+
    "\1\20\1\0\3\4\3\0\5\4\1\31\3\4\1\32"+
    "\1\33\1\4\1\34\1\35\3\0\7\4\1\36\1\37"+
    "\3\0\1\40\1\41\1\4\1\42\2\4\1\43\1\44"+
    "\1\45\1\46\1\4\1\47";

  private static int [] zzUnpackAction() {
    int [] result = new int[142];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc\0\u02ee"+
    "\0\u0320\0\u0352\0\u0384\0\u01c2\0\u03b6\0\u03e8\0\u041a\0\62"+
    "\0\62\0\62\0\62\0\62\0\62\0\62\0\62\0\62"+
    "\0\62\0\u044c\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578"+
    "\0\u05aa\0\u01c2\0\u05dc\0\u060e\0\u0640\0\u0672\0\u06a4\0\u06d6"+
    "\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866"+
    "\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u03b6\0\u0960\0\62\0\u03e8"+
    "\0\u0992\0\u09c4\0\u09f6\0\62\0\62\0\u0a28\0\u0a5a\0\u0a8c"+
    "\0\u0abe\0\u0af0\0\u0b22\0\u0578\0\u0b54\0\u0b86\0\u0bb8\0\u0bea"+
    "\0\u0c1c\0\u0c4e\0\u01c2\0\u0c80\0\u0cb2\0\u0ce4\0\u01c2\0\u01c2"+
    "\0\u01c2\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\u03e8\0\u0dde\0\u0e10"+
    "\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0"+
    "\0\u0fd2\0\u1004\0\u01c2\0\u1036\0\u1068\0\u109a\0\u01c2\0\u09f6"+
    "\0\u10cc\0\u01c2\0\u01c2\0\u10fe\0\u1130\0\u1162\0\u1194\0\u11c6"+
    "\0\u11f8\0\u122a\0\u125c\0\u128e\0\u12c0\0\u01c2\0\u01c2\0\u12f2"+
    "\0\u1324\0\u1356\0\u01c2\0\u01c2\0\u1388\0\u01c2\0\u13ba\0\u13ec"+
    "\0\62\0\62\0\62\0\u01c2\0\u141e\0\u01c2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[142];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\2\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\12\1\16\1\17"+
    "\1\12\1\20\1\12\1\21\1\22\1\23\1\24\1\12"+
    "\1\25\1\2\1\26\1\27\1\2\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\12\1\44\1\45\2\12\1\46\1\47\1\12"+
    "\63\0\2\3\62\0\1\4\1\50\22\12\1\0\1\12"+
    "\21\0\6\12\1\0\1\12\3\0\1\12\1\0\1\12"+
    "\1\51\20\12\1\0\1\12\21\0\6\12\1\0\1\12"+
    "\3\0\1\12\1\0\4\12\1\52\15\12\1\0\1\12"+
    "\21\0\6\12\1\0\1\12\3\0\1\12\1\0\1\12"+
    "\1\53\13\12\1\54\4\12\1\0\1\12\21\0\6\12"+
    "\1\0\1\12\3\0\1\12\1\0\1\55\21\12\1\0"+
    "\1\12\21\0\6\12\1\0\1\12\3\0\1\12\1\0"+
    "\3\12\1\56\4\12\1\57\2\12\1\60\6\12\1\0"+
    "\1\12\21\0\6\12\1\0\1\12\3\0\1\12\1\0"+
    "\22\12\1\0\1\12\21\0\6\12\1\0\1\12\3\0"+
    "\1\12\1\0\4\12\1\61\15\12\1\0\1\12\21\0"+
    "\6\12\1\0\1\12\3\0\1\12\1\0\15\12\1\62"+
    "\4\12\1\0\1\12\21\0\6\12\1\0\1\12\3\0"+
    "\1\12\1\0\11\12\1\63\6\12\1\64\1\12\1\0"+
    "\1\12\21\0\6\12\1\0\1\12\3\0\1\12\1\0"+
    "\20\12\1\65\1\12\1\0\1\12\21\0\6\12\1\0"+
    "\1\12\3\0\1\12\1\0\1\66\21\12\1\0\1\12"+
    "\21\0\6\12\1\0\1\12\3\0\1\12\1\0\1\67"+
    "\21\12\1\0\1\12\21\0\6\12\1\0\1\12\3\0"+
    "\1\12\1\0\3\12\1\70\16\12\1\0\1\12\21\0"+
    "\6\12\1\0\1\12\3\0\1\12\1\0\3\12\1\71"+
    "\16\12\1\0\1\12\21\0\6\12\1\0\1\12\3\0"+
    "\1\12\1\0\1\12\1\72\14\12\1\73\1\12\1\74"+
    "\1\12\1\0\1\12\21\0\6\12\1\0\1\12\27\75"+
    "\1\76\1\75\1\77\30\75\27\100\1\101\3\100\1\77"+
    "\26\100\34\0\1\102\1\103\74\0\1\104\62\0\1\105"+
    "\13\0\1\12\1\0\1\12\1\106\20\12\1\0\1\12"+
    "\21\0\6\12\1\0\1\12\3\0\1\12\1\0\13\12"+
    "\1\107\6\12\1\0\1\12\21\0\6\12\1\0\1\12"+
    "\3\0\1\12\1\0\15\12\1\110\4\12\1\0\1\12"+
    "\21\0\6\12\1\0\1\12\15\0\1\111\2\0\1\112"+
    "\5\0\1\113\36\0\1\114\61\0\1\12\1\0\2\12"+
    "\1\115\17\12\1\0\1\12\21\0\6\12\1\0\1\12"+
    "\3\0\1\12\1\0\1\116\21\12\1\0\1\12\21\0"+
    "\6\12\1\0\1\12\3\0\1\12\1\0\22\12\1\0"+
    "\1\12\21\0\1\117\5\12\1\0\1\12\3\0\1\12"+
    "\1\0\10\12\1\120\11\12\1\0\1\12\21\0\6\12"+
    "\1\0\1\12\3\0\1\12\1\0\5\12\1\121\14\12"+
    "\1\0\1\12\21\0\6\12\1\0\1\12\3\0\1\12"+
    "\1\0\20\12\1\122\1\12\1\0\1\12\21\0\6\12"+
    "\1\0\1\12\3\0\1\12\1\0\14\12\1\115\5\12"+
    "\1\0\1\12\21\0\6\12\1\0\1\12\3\0\1\12"+
    "\1\0\3\12\1\123\16\12\1\0\1\12\21\0\6\12"+
    "\1\0\1\12\3\0\1\12\1\0\16\12\1\124\3\12"+
    "\1\0\1\12\21\0\6\12\1\0\1\12\3\0\1\12"+
    "\1\0\12\12\1\115\7\12\1\0\1\12\21\0\6\12"+
    "\1\0\1\12\3\0\1\12\1\0\6\12\1\125\13\12"+
    "\1\0\1\12\21\0\6\12\1\0\1\12\3\0\1\12"+
    "\1\0\13\12\1\126\6\12\1\0\1\12\21\0\6\12"+
    "\1\0\1\12\3\0\1\12\1\0\10\12\1\127\11\12"+
    "\1\0\1\12\21\0\6\12\1\0\1\12\3\0\1\12"+
    "\1\0\3\12\1\130\16\12\1\0\1\12\21\0\6\12"+
    "\1\0\1\12\3\0\1\12\1\0\11\12\1\131\10\12"+
    "\1\0\1\12\21\0\6\12\1\0\1\12\3\0\1\12"+
    "\1\0\16\12\1\132\3\12\1\0\1\12\21\0\6\12"+
    "\1\0\1\12\3\0\1\12\1\0\16\12\1\133\3\12"+
    "\1\0\1\12\21\0\6\12\1\0\1\12\3\0\1\12"+
    "\1\0\15\12\1\134\4\12\1\0\1\12\21\0\6\12"+
    "\1\0\1\12\3\0\1\12\1\0\15\12\1\135\4\12"+
    "\1\0\1\12\21\0\6\12\1\0\1\12\1\75\1\0"+
    "\30\75\1\0\27\75\27\100\1\101\3\100\1\136\26\100"+
    "\1\102\1\0\30\102\1\0\27\102\35\103\1\137\24\103"+
    "\3\0\1\12\1\0\16\12\1\140\3\12\1\0\1\12"+
    "\21\0\6\12\1\0\1\12\3\0\1\12\1\0\10\12"+
    "\1\141\11\12\1\0\1\12\21\0\6\12\1\0\1\12"+
    "\3\0\1\12\1\0\15\12\1\142\4\12\1\0\1\12"+
    "\21\0\6\12\1\0\1\12\6\0\1\143\60\0\1\144"+
    "\74\0\1\145\44\0\1\12\1\0\3\12\1\131\16\12"+
    "\1\0\1\12\21\0\6\12\1\0\1\12\3\0\1\12"+
    "\1\0\11\12\1\130\10\12\1\0\1\12\21\0\6\12"+
    "\1\0\1\12\3\0\1\12\1\0\6\12\1\146\13\12"+
    "\1\0\1\12\21\0\6\12\1\0\1\12\3\0\1\12"+
    "\1\0\13\12\1\147\6\12\1\0\1\12\21\0\6\12"+
    "\1\0\1\12\3\0\1\12\1\0\6\12\1\150\13\12"+
    "\1\0\1\12\21\0\6\12\1\0\1\12\3\0\1\12"+
    "\1\0\13\12\1\151\6\12\1\0\1\12\21\0\6\12"+
    "\1\0\1\12\3\0\1\12\1\0\6\12\1\152\13\12"+
    "\1\0\1\12\21\0\6\12\1\0\1\12\3\0\1\12"+
    "\1\0\3\12\1\153\16\12\1\0\1\12\21\0\6\12"+
    "\1\0\1\12\3\0\1\12\1\0\2\12\1\154\17\12"+
    "\1\0\1\12\21\0\6\12\1\0\1\12\3\0\1\12"+
    "\1\0\1\12\1\155\20\12\1\0\1\12\21\0\6\12"+
    "\1\0\1\12\3\0\1\12\1\0\4\12\1\125\15\12"+
    "\1\0\1\12\21\0\6\12\1\0\1\12\3\0\1\12"+
    "\1\0\1\12\1\156\20\12\1\0\1\12\21\0\6\12"+
    "\1\0\1\12\3\0\1\12\1\0\2\12\1\157\17\12"+
    "\1\0\1\12\21\0\6\12\1\0\1\12\34\103\1\160"+
    "\1\137\24\103\3\0\1\12\1\0\6\12\1\161\13\12"+
    "\1\0\1\12\21\0\6\12\1\0\1\12\3\0\1\12"+
    "\1\0\22\12\1\0\1\12\21\0\3\12\1\162\2\12"+
    "\1\0\1\12\3\0\1\12\1\0\16\12\1\163\3\12"+
    "\1\0\1\12\21\0\6\12\1\0\1\12\57\0\1\164"+
    "\54\0\1\165\17\0\1\166\54\0\1\12\1\0\16\12"+
    "\1\167\3\12\1\0\1\12\21\0\6\12\1\0\1\12"+
    "\3\0\1\12\1\0\10\12\1\170\11\12\1\0\1\12"+
    "\21\0\6\12\1\0\1\12\3\0\1\12\1\0\3\12"+
    "\1\171\16\12\1\0\1\12\21\0\6\12\1\0\1\12"+
    "\3\0\1\12\1\0\1\172\21\12\1\0\1\12\21\0"+
    "\6\12\1\0\1\12\3\0\1\12\1\0\2\12\1\173"+
    "\17\12\1\0\1\12\21\0\6\12\1\0\1\12\3\0"+
    "\1\12\1\0\1\12\1\174\20\12\1\0\1\12\21\0"+
    "\6\12\1\0\1\12\3\0\1\12\1\0\10\12\1\175"+
    "\11\12\1\0\1\12\21\0\6\12\1\0\1\12\3\0"+
    "\1\12\1\0\10\12\1\176\11\12\1\0\1\12\21\0"+
    "\6\12\1\0\1\12\3\0\1\12\1\0\3\12\1\177"+
    "\16\12\1\0\1\12\21\0\6\12\1\0\1\12\23\0"+
    "\1\200\46\0\1\201\74\0\1\202\41\0\1\12\1\0"+
    "\3\12\1\203\16\12\1\0\1\12\21\0\6\12\1\0"+
    "\1\12\3\0\1\12\1\0\11\12\1\204\10\12\1\0"+
    "\1\12\21\0\6\12\1\0\1\12\3\0\1\12\1\0"+
    "\1\205\21\12\1\0\1\12\21\0\6\12\1\0\1\12"+
    "\3\0\1\12\1\0\22\12\1\0\1\12\21\0\4\12"+
    "\1\206\1\12\1\0\1\12\3\0\1\12\1\0\1\131"+
    "\21\12\1\0\1\12\21\0\6\12\1\0\1\12\3\0"+
    "\1\12\1\0\20\12\1\207\1\12\1\0\1\12\21\0"+
    "\6\12\1\0\1\12\3\0\1\12\1\0\13\12\1\210"+
    "\6\12\1\0\1\12\21\0\6\12\1\0\1\12\10\0"+
    "\1\211\132\0\1\212\52\0\1\213\12\0\1\12\1\0"+
    "\7\12\1\115\12\12\1\0\1\12\21\0\6\12\1\0"+
    "\1\12\3\0\1\12\1\0\11\12\1\214\10\12\1\0"+
    "\1\12\21\0\6\12\1\0\1\12\3\0\1\12\1\0"+
    "\15\12\1\215\4\12\1\0\1\12\21\0\6\12\1\0"+
    "\1\12\3\0\1\12\1\0\1\216\21\12\1\0\1\12"+
    "\21\0\6\12\1\0\1\12";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5200];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\25\1\12\11\6\1\1\0\24\1\2\0"+
    "\1\11\2\0\1\1\1\0\2\11\3\1\3\0\23\1"+
    "\1\0\3\1\3\0\16\1\3\0\11\1\3\0\6\1"+
    "\3\11\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[142];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _GlagolLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _GlagolLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          case 40: break;
          case 2: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          case 41: break;
          case 3: 
            { return INT;
            }
          case 42: break;
          case 4: 
            { return ID;
            }
          case 43: break;
          case 5: 
            { return OP_EQ;
            }
          case 44: break;
          case 6: 
            { return SEMICOLON;
            }
          case 45: break;
          case 7: 
            { return COLON;
            }
          case 46: break;
          case 8: 
            { return COMMA;
            }
          case 47: break;
          case 9: 
            { return LEFT_BRACE;
            }
          case 48: break;
          case 10: 
            { return RIGHT_BRACE;
            }
          case 49: break;
          case 11: 
            { return LEFT_BRACKET;
            }
          case 50: break;
          case 12: 
            { return RIGHT_BRACKET;
            }
          case 51: break;
          case 13: 
            { return LEFT_PAREN;
            }
          case 52: break;
          case 14: 
            { return RIGHT_PAREN;
            }
          case 53: break;
          case 15: 
            { return DECL_AS;
            }
          case 54: break;
          case 16: 
            { return STRING;
            }
          case 55: break;
          case 17: 
            { return LINE_COMMENT;
            }
          case 56: break;
          case 18: 
            { return EXTERNAL_START;
            }
          case 57: break;
          case 19: 
            { return EXTERNAL_END;
            }
          case 58: break;
          case 20: 
            { return NUMBER;
            }
          case 59: break;
          case 21: 
            { return DECL_IMPORT;
            }
          case 60: break;
          case 22: 
            { return TYPE_INT;
            }
          case 61: break;
          case 23: 
            { return REL_DIR;
            }
          case 62: break;
          case 24: 
            { return ANNO_TAG;
            }
          case 63: break;
          case 25: 
            { return BOOLEAN;
            }
          case 64: break;
          case 26: 
            { return DECL_IMPORT_FROM;
            }
          case 65: break;
          case 27: 
            { return BLOCK_COMMENT;
            }
          case 66: break;
          case 28: 
            { return DECL_WITH;
            }
          case 67: break;
          case 29: 
            { return TYPE_BOOL;
            }
          case 68: break;
          case 30: 
            { return TYPE_FLOAT;
            }
          case 69: break;
          case 31: 
            { return DECL_VALUE;
            }
          case 70: break;
          case 32: 
            { return DECL_MODULE;
            }
          case 71: break;
          case 33: 
            { return DECL_ENTITY;
            }
          case 72: break;
          case 34: 
            { return TYPE_STRING;
            }
          case 73: break;
          case 35: 
            { return ANNO_TABLE;
            }
          case 74: break;
          case 36: 
            { return ANNO_INDEX;
            }
          case 75: break;
          case 37: 
            { return ANNO_FIELD;
            }
          case 76: break;
          case 38: 
            { return ANNO_SPECIAL_VALUE;
            }
          case 77: break;
          case 39: 
            { return DECL_REL;
            }
          case 78: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
