{
  parserClass="com.glagol.parser.GlagolParser"
  parserUtilClass="com.glagol.parser.GlagolParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Glagol"
  psiImplClassSuffix="Impl"
  psiPackage="com.glagol.psi"
  psiImplPackage="com.glagol.psi.impl"

  elementTypeHolderClass="com.glagol.psi.GlagolTypes"
  elementTypePrefix="G_"
  elementTypeClass="com.glagol.psi.GlagolElementType"
  tokenTypeClass="com.glagol.psi.GlagolTokenType"

  tokens = [
    OP_EQ="="
    SEMICOLON=";"
    COLON=":"
    COMMA=","
    LEFT_BRACE="{"
    RIGHT_BRACE="}"
    LEFT_BRACKET="["
    RIGHT_BRACKET="]"
    LEFT_PAREN="("
    RIGHT_PAREN=")"
    AT="@"

    KW_MODULE="module"
    KW_ENTITY="entity"
    KW_VALUE="value"
    KW_IMPORT="use"
    KW_FROM="from"
    KW_ALIAS="as"
    KW_REL="relation"
    KW_WITH="with"
    KW_PRIMARY="primary"

    TYPE_STRING="string"
    TYPE_INT="int"
    TYPE_BOOL="bool"
    TYPE_FLOAT="float"

    alpha="regexp:[:alpha:]+"
    int="regexp:\d+"
    decimal="regexp:\d+\.\d+"
    artifact_id="regexp:[A-Z]\w*"
    //anno_tag="regexp:name|sequence|type|size|column|key"
    access_option="regexp:add|set|get|reset|clear"
    boolean="regexp:true|false"
    rel_dir="regexp:one|many"
    id="regexp:(\\[a-z]\w*|[a-z]\w*)"
    string="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\\"|\\\'|\\)*\")"
    line_comment="regexp://.*"
    block_comment="regexp:/\*([^])*\*/"
  ]
}

root ::= !<<eof>> annotation* 'module' artifact_id ';' import_artifact* declaration?

private import_artifact ::= 'use' artifact_id decl_type ('from' artifact_id)? ('as' artifact_id)? ';'
decl_type ::= 'entity' | 'value'

declaration ::= annotation* decl_type artifact_id '{' member+ '}' {pin=4 recoverWhile=declaration_recover}
private declaration_recover ::= !('entity' | 'module' | ',' | id)
annotation ::= anno annotation_args?

private annotation_args ::= '(' (annotation_arg ",")* annotation_arg ')' {pin=1}
private annotation_arg ::= string | annotation_list | annotation_map

private annotation_list ::= '[' (annotation_arg ",")* annotation_arg ']' {pin=1}

private annotation_map ::= '{' (annotation_map_pair ",")* annotation_map_pair '}' {pin=1 recoverWhile="#auto"}
private annotation_map_pair ::= id ':' annotation_literal
private annotation_literal ::= decimal | int | boolean | 'primary' | string | data_type

anno ::= '@' id

member ::= member_value | entity_relation

member_value ::= annotation? 'value' data_type var default_value? ';'
private default_value ::= '=' literal
private literal ::= decimal | string | int | boolean
private data_type ::= 'int' | 'string' | 'bool' | 'float' | artifact_id

private entity_relation ::= 'relation' rel_dir ':' rel_dir artifact_id 'as' var ('with' '{' access_tokens '}')? ';'
private access_tokens ::= (access_token ',')* access_token
private access_token ::= access_option

var ::= id