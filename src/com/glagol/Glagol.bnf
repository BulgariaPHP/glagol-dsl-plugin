{
  parserClass="com.glagol.parser.GlagolParser"
  parserUtilClass="com.glagol.parser.GlagolParserUtil"

  extends="com.glagol.psi.impl.GlagolPsiElement"

  psiClassPrefix="Glagol"
  psiImplClassSuffix="Impl"
  psiPackage="com.glagol.psi"
  psiImplPackage="com.glagol.psi.impl"

  elementTypeHolderClass="com.glagol.psi.GlagolTypes"
  elementTypePrefix="G_"
  elementTypeClass="com.glagol.psi.GlagolElementType"
  tokenTypeClass="com.glagol.psi.GlagolTokenType"

  psiImplUtilClass="com.glagol.psi.impl.GlagolPsiImplUtil"

  extends(".*type")=type
  extends(".*_expr")=expr
  extends(".*_qexpr")=qexpr
  extends(".*stmt")=stmt


  generateTokenAccessors=true

  consumeTokenMethod(".*_expr|expr")="consumeTokenFast"

  tokens = [
    OP_EQ="="
    SEMICOLON=";"
    COLON=":"
    DOUBLE_COLON="::"
    COMMA=","
    LEFT_BRACE="{"
    RIGHT_BRACE="}"
    LEFT_BRACKET="["
    RIGHT_BRACKET="]"
    LEFT_PAREN="("
    RIGHT_PAREN=")"
    AT="@"
    MINUS="-"
    PLUS="+"
    DOT="."
    ASTERIX="*"
    PERCENT="%"
    SLASH="/"
    QEXPR_START="<<"
    QEXPR_END=">>"
    LT="<"
    GT=">"
    LTE="<="
    GTE=">="
    EQ="=="
    NON_EQ="!="
    AND="&&"
    OR="||"
    QUESTION_MARK="?"

    KW_NS="namespace"
    KW_ENTITY="entity"
    KW_VALUE="value"
    KW_REPOSITORY="repository"
    KW_IMPORT="import"
    KW_ALIAS="as"
    KW_REL="relation"
    KW_GET="get"
    KW_SELFIE="selfie"
    KW_NEW="new"
    KW_PRIMARY="primary"
    KW_WHEN="when"
    KW_THIS="this"
    KW_IF="if"
    KW_ELSE="else"
    KW_FOR="for"
    KW_RETURN="return"
    KW_PERSIST="persist"
    KW_FLUSH="flush"
    KW_REMOVE="remove"
    KW_BREAK="break"
    KW_CONTINUE="continue"
    KW_PRIVATE="private"
    KW_PUBLIC="public"
    KW_REST="rest"
    KW_JSON_API="json-api"
    KW_CONTROLLER="controller"
    KW_SERVICE="service"
    KW_UTIL="util"
    KW_SELECT="SELECT"
    KW_FROM="FROM"
    KW_WHERE="WHERE"
    KW_ORDER="ORDER"
    KW_BY="BY"
    KW_LIMIT="LIMIT"
    KW_OFFSET="OFFSET"
    KW_DESC="DESC"
    KW_ASC="ASC"
    KW_IS="IS"
    KW_NOT="NOT"
    KW_NULL="NULL"
    KW_AND="AND"
    KW_OR="OR"

    TYPE_STRING="string"
    TYPE_INT="int"
    TYPE_BOOL="regexp:bool|boolean"
    TYPE_FLOAT="float"
    TYPE_VOID="void"

    int="regexp:\d+"
    decimal="regexp:\d+\.\d+"
    SYMBOL_NAME="regexp:[A-Z]\w*"
    boolean="regexp:true|false"
    id="regexp:[a-z][a-zA-Z]*"
    string="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\\"|\\\'|\\)*\")"
    line_comment="regexp://.*"
    block_comment="regexp:/\*([^])*\*/"
  ]
}

root ::= !<<eof>> annotation* 'namespace' qualified_name import_artifact* declaration?

qualified_name ::= SYMBOL_NAME ('::' SYMBOL_NAME)*

import_artifact ::= 'import' qualified_name ('as' SYMBOL_NAME)? ';'

declaration ::= annotation* (decl_entity | decl_value | decl_repo | decl_controller | decl_util)

decl_entity ::= 'entity' SYMBOL_NAME '{' member* '}'
decl_value ::= 'value' SYMBOL_NAME '{' member* '}'
decl_repo ::= 'repository' 'for' SYMBOL_NAME '{' member* '}'
decl_util ::= ('util' | 'service') SYMBOL_NAME '{' member* '}'
decl_controller ::= controller_type 'controller' route '{' member* '}'

private controller_type ::= 'rest' | 'json-api'
private route ::= '/' route_parts?
private route_parts ::= (route_part '/')* route_part
private route_part ::= id | route_placeholder
private route_placeholder ::= ':' id

annotation ::= '@' id '=' annotation_arg | '@' id '(' annotation_arg_sequence ')'| '@' id {
    methods = [getName isAnnotation]
}
private annotation_arg ::= literal | annotation_arg_list | annotation_arg_map
private annotation_arg_list ::= '[' annotation_arg_sequence? ']'
private annotation_arg_sequence ::= (annotation_arg ',')* annotation_arg
private annotation_arg_map ::= '[' ((annotation_arg_pair ',')* annotation_arg_pair)? ']'
private annotation_arg_pair ::= annotation_arg ':' annotation_arg

member ::= annotation* (property | constructor | method | action)

property ::= type id ('=' property_default_value)? ';'
property_default_value ::= default_value

constructor ::= SYMBOL_NAME '(' abstract_parameters? ')' block_stmt guard?

method ::= (modifier type id '(' abstract_parameters? ')' block_stmt guard?)
         | (modifier type id '(' abstract_parameters? ')' '=' expr guard)
         | (modifier type id '(' abstract_parameters? ')' '=' expr ';')

action ::= id ('(' abstract_parameters? ')')? action_body
private action_body ::= action_body_expr | action_body_statement
private action_body_statement ::= block_stmt
private action_body_expr ::= '=' expr ';'

private modifier ::= 'private' | 'public'

stmt ::= expr_stmt
       | block_stmt
       | if_stmt
       | assign_stmt
       | foreach_stmt
       | non_assoc_group
       | empty_stmt

private non_assoc_group ::= return_stmt | persist_stmt | flush_stmt | remove_stmt | break_stmt | continue_stmt | declare_stmt

empty_stmt ::= ';'
declare_stmt ::= type id (declare_default_val | ';')
private declare_default_val ::= ('=' (assign_stmt | expr_stmt))
continue_stmt ::= 'continue' int? ';'
break_stmt ::= 'break' int? ';'
remove_stmt ::= 'remove' expr ';'
flush_stmt ::= 'flush' expr? ';'
persist_stmt ::= 'persist' expr ';'
return_stmt ::= 'return' expr? ';'

expr_stmt ::= expr ';'
block_stmt ::= '{' stmt* '}'
if_stmt ::= 'if' '(' expr ')' stmt ('else' stmt)
assign_stmt ::= expr '=' (assign_stmt | expr_stmt) {rightAssociative=true}
foreach_stmt ::= 'for' '(' expr 'as' id (':' id) conditions? ')' stmt
private conditions ::= (',' expr)+

private guard ::= 'when' expr ';'

private abstract_parameters ::= (abstract_parameter ',')* abstract_parameter
private abstract_parameter ::= annotation* parameter
private parameter ::= type id ('=' default_value)?

default_value ::= literal | dv_list | dv_map | get | new

dv_list ::= '[' dv_sequence? ']'
dv_sequence ::= ((default_value ',')* default_value) | (default_value ',')+

dv_map ::= '{' dv_map_sequence? '}'
dv_map_sequence ::= ((dv_map_pair ',')* dv_map_pair) | (dv_map_pair ',')+
dv_map_pair ::= default_value ':' default_value

literal ::= string | int | decimal | boolean

get ::= 'get' type
new ::= 'new' artifact_type '(' dv_sequence? ')'

type ::= scalar_type
       | list_type
       | map_type
       | repository_type
       | artifact_type
       | selfie_type
       | void_type

void_type ::= 'void'
selfie_type ::= 'selfie'
scalar_type ::= TYPE_BOOL | TYPE_FLOAT | TYPE_INT | TYPE_STRING | TYPE_VOID
list_type ::= type '[' ']'
map_type ::= '{' type ',' type '}'
repository_type ::= 'repository' '<' SYMBOL_NAME '>'
artifact_type ::= SYMBOL_NAME

expr ::= cast_expr
       | bracket_expr
       | literal_expr
       | list_expr
       | map_expr
       | negative_expr
       | positive_expr
       | invoke_group
       | field_expr
       | variable_expr
       | new_expr
       | this_expr
       | mul_group
       | add_group
       | remainder_expr
       | bin_rel_group
       | bin_logic_group
       | ternary_expr
       | query_expr


private bin_logic_group ::= and_expr | or_expr
private bin_rel_group ::= lt_expr | lte_expr | gt_expr | gte_expr | eq_expr | non_eq_expr
private add_group ::= plus_expr | minus_expr
private mul_group ::= product_expr | division_expr
private invoke_group ::= invoke_expr | invoke_final_expr

ternary_expr ::= expr '?' expr ':' expr
and_expr ::= expr '&&' expr
or_expr ::= expr '||' expr
lt_expr ::= expr '<' expr
lte_expr ::= expr '<=' expr
gt_expr ::= expr '>' expr
gte_expr ::= expr '>=' expr
eq_expr ::= expr '==' expr
non_eq_expr ::= expr '!=' expr
plus_expr ::= expr '+' expr
minus_expr ::= expr '-' expr
product_expr ::= expr '*' expr
division_expr ::=  expr '/' expr
remainder_expr ::= expr '%' expr
literal_expr ::= literal
list_expr ::= '[' list_seq_expr? ']'
list_seq_expr ::= seq_expr | (expr ',')+
seq_expr ::= (expr ',')* expr
map_expr ::= '{' map_seq_expr? '}'
map_seq_expr ::= ((map_pair_expr ',')* map_pair_expr) | (map_pair_expr ',')+
map_pair_expr ::= expr ':' expr
negative_expr ::= '-' expr
positive_expr ::= '+'
invoke_expr ::= expr '.' invoke_final_expr
invoke_final_expr ::= id '(' seq_expr? ')'
field_expr ::= expr '.' id
variable_expr ::= id
new_expr ::= 'new' SYMBOL_NAME '(' seq_expr? ')'
bracket_expr ::= '(' expr ')'
this_expr ::= 'this'
cast_expr ::= '(' type ')' expr
query_expr ::= query_statement

query_statement ::= query_select

private query_select ::= "SELECT" query_spec "FROM" query_source query_where? query_order_by? query_limit?

query_spec ::= id ('[' ']')?

private query_source ::= SYMBOL_NAME id | SYMBOL_NAME "as" id
private query_where ::= "WHERE" qexpr

qexpr ::= bracket_qexpr
        | equals_qexpr
        | non_equals_qexpr
        | gt_qexpr
        | gte_qexpr
        | lt_qexpr
        | lte_qexpr
        | is_null_qexpr
        | is_not_null_qexpr
        | and_qexpr
        | or_qexpr
        | g_qexpr
        | query_field_qexpr

bracket_qexpr ::= "(" qexpr ")"
equals_qexpr ::= qexpr "=" qexpr
non_equals_qexpr ::= qexpr "!=" qexpr
gt_qexpr ::= qexpr ">" qexpr
gte_qexpr ::= qexpr ">=" qexpr
lt_qexpr ::= qexpr "<" qexpr
lte_qexpr ::= qexpr "<=" qexpr
is_null_qexpr ::= qexpr "IS" "NULL"
is_not_null_qexpr ::= qexpr "IS" "NOT" "NULL"
and_qexpr ::= qexpr "AND" qexpr
or_qexpr ::= qexpr "OR" qexpr
g_qexpr ::= '<<' expr '>>'
query_field_qexpr ::= query_field

query_field ::= id '.' id

private query_order_by ::= "ORDER" "BY" (query_order_by_field ',')* query_order_by_field
private query_order_by_field ::= query_field | query_field "ASC" | query_field "DESC"
private query_limit ::= "LIMIT" qexpr | "LIMIT" qexpr "OFFSET" qexpr | "LIMIT" qexpr "," qexpr
